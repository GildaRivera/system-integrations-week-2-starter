<!-- <!DOCTYPE html>
<html lang="en" class="h-100">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content="" />
    <meta name="author" content="JD" />
    <title>DSU Chat</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"
      crossorigin="anonymous"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css"
    />
    <style>
      img {
        max-height: 60vh;
        max-width: 80vw;
        height: auto;
        width: auto;
      }
      
      .carousel-control-prev, .carousel-control-next {
        max-height: 75%;
      }
    </style>
  </head>

  <body class="d-flex flex-column h-100">
    <header class="p-2 bg-light fixed-top">
      <div class="container">
        <div class="d-flex flex-wrap align-items-center justify-content-center">
          <h1>DSU Chat Specs</h1>
        </div>
      </div>
    </header>

    <main class="flex-shrink-0 my-5">
      <div class="container my-5">
        <div
          id="dsu-chat-instructions-carousel"
          class="carousel carousel-dark slide"
          data-bs-ride="carousel"
        >
          <div class="carousel-indicators">
            <% content.map((cardContent, index) => { %>
            <button
              type="button"
              data-bs-target="#dsu-chat-instructions-carousel"
              <% if(cardContent.active) { %> 
              class="active"
              aria-current="true"
              <% } %>
              data-bs-slide-to="<%= index %>"
              aria-label="Slide <%= index + 1 %>"
              title="Slide <%= index + 1 %>"
            ></button>
            <% }); %>
          </div>
          <div class="carousel-inner">
            <% content.map((cardContent) => { %>
              <% if(cardContent.active) { %> 
              <div class="carousel-item active">
              <% } else { %>
              <div class="carousel-item">
              <% } %>
                <div class="card mb-5 border-light">
                  <div
                    class="
                      d-flex
                      flex-wrap
                      align-items-center
                      justify-content-center
                      my-3
                    "
                  >
                    <img src="<%= cardContent.imgSrc %> " class="d-block" alt="..." />
                  </div>
                  <div class="card-body" z-index="-1">
                    <h5 class="card-title"><%= cardContent.cardTitle %></h5>
                    <p class="card-text">
                      <%- cardContent.cardText %>
                    </p>
                  </div>
                </div>
              </div>
            <% }); %>
          </div>
          <button
            class="carousel-control-prev"
            type="button"
            data-bs-target="#dsu-chat-instructions-carousel"
            data-bs-slide="prev"
          >
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
          </button>
          <button
            class="carousel-control-next"
            type="button"
            data-bs-target="#dsu-chat-instructions-carousel"
            data-bs-slide="next"
          >
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
          </button>
        </div>
      </div>
    </main>

    <footer class="footer mt-auto py-3 bg-light fixed-bottom">
      <div class="container">
        <div class="d-flex flex-wrap align-items-center justify-content-center">
          Copyright Telus <%= (new Date()).getFullYear() %>
        </div>
      </div>
    </footer>

    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
      crossorigin="anonymous"
    ></script>

    <script></script>
  </body>
</html> -->

<!DOCTYPE html>
<html>

<head>
  <title>Socket.IO chat</title>
  <style>
    body {
      margin: 0;
      padding-bottom: 3rem;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    }

    #form {
      background: rgba(0, 0, 0, 0.15);
      padding: 0.25rem;
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      display: flex;
      height: 3.5rem;
      box-sizing: border-box;
      backdrop-filter: blur(10px);
    }

    #input {
      border: none;
      padding: 0 1rem;
      flex-grow: 1;
      border-radius: 2rem;
      margin: 0.25rem;
    }

    #input:focus {
      outline: none;
    }

    #form>button {

      border: none;
      padding: 0 1rem;
      margin: 0.25rem;
      border-radius: 3px;
      outline: none;
      color: #fff;
    }

    #messages {
      list-style-type: none;
      margin: 0;
      padding: 0;
    }

    #messages>li {
      padding: 0.5rem 1rem;
    }

    #messages>li:nth-child(odd) {
      background: #efefef;
    }

    /* The Modal (background) */
    .modal {
      display: none;
      /* Hidden by default */
      position: fixed;
      /* Stay in place */
      z-index: 1;
      /* Sit on top */
      padding-top: 100px;
      /* Location of the box */
      left: 0;
      top: 0;
      width: 100%;
      /* Full width */
      height: 100%;
      /* Full height */
      overflow: auto;
      /* Enable scroll if needed */
      background-color: rgb(0, 0, 0);
      /* Fallback color */
      background-color: rgba(0, 0, 0, 0.4);
      /* Black w/ opacity */
    }

    /* Modal Content */
    .modal-content {
      background-color: #fefefe;
      margin: auto;
      padding: 20px;
      border: 1px solid #888;
      width: 80%;
    }

    /* The Close Button */
    .close {
      color: #aaaaaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
    }

    .close:hover,
    .close:focus {
      color: #000;
      text-decoration: none;
      cursor: pointer;
    }
  </style>
  <script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css">
</head>

<body id="body">

  <section class="hero is-primary">
    <div class="hero-body" style="display: flex;">
      <i class="material-icons" style="font-size:50px; position: relative; bottom:1vh; right:1vw">
        account_circle
      </i>
      <h1 id="userName" class="title"> </h1>
      <button class="button is-primary" id="myBtn"> <i class="material-icons">mode_edit</i></button>

    </div>
  </section>
  <ul id="messages"></ul>
  <form id="form" action="">
    <input id="input" autocomplete="off" />
    <button class="button is-primary">    <i class="material-icons">
      send
    </i></button>
    <button class="button is-primary" id="delete">    <i class="material-icons">
    delete
    </i></button>
  </form>
  <div id="card">





    <!-- The Modal -->
    <div id="myModal" class="modal">

      <!-- Modal content -->
      <div class="modal-content">
        <span class="close">&times;</span>

        <div class="card-content">
          <div class="content">
            <div class="field">
              <label class="label">Username</label>
              <div class="control has-icons-left has-icons-right">
                <input id="name" class="input is-success" type="text" placeholder="User name">

              </div>
              <button class="button is-primary is-outlined" onclick="changeName()" style="position: relative;
      left: 80%;
      top: 3vh;
  width: 8vw;
  ">Save</button>
            </div>


          </div>
        </div>
      </div>

    </div>
  </div>



  <script>
    // Get the modal
    var modal = document.getElementById("myModal");

    // Get the button that opens the modal
    var btn = document.getElementById("myBtn");

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];

    // When the user clicks the button, open the modal 
    btn.onclick = function () {
      modal.style.display = "block";
    }

    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
      modal.style.display = "none";
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
      if (event.target == modal) {
        modal.style.display = "none";
      }
    }
  </script>

</body>
<script src="/socket.io/socket.io.js"></script>




<script type="text/babel">
  var dataUser = {}
  var socket = io();
  var messages = document.getElementById('messages');
  var form = document.getElementById('form');
  var input = document.getElementById('input');
  var deleteB = document.getElementById('delete')

  form.addEventListener('submit', function (e) {
    e.preventDefault();
    if (input.value) {
      let data = document.getElementById('userName').innerHTML
      socket.emit('chat message', { "user": data, "message": input.value });
      input.value = '';
    }
  });
  deleteB.addEventListener('click', function (e) {
    e.preventDefault();
    socket.emit('delete message', input.value);

  });
  window.addEventListener('beforeunload', function (e) {
    e.preventDefault();
    e.returnValue = '';

    socket.emit('disconnect', 1)
  });
  socket.on('chat message', function (msg) {

    var item = document.createElement('li');
    let head = document.createElement('h4');
    let mess = document.createElement('h6');
    mess.textContent = msg.message
    item.appendChild(head)
    item.appendChild(mess)
    //let message=document.createElement('p');
    if (msg.user == dataUser.username) {
      head.textContent = "You"
      head.style.color = `#${dataUser.color}`
      head.style.fontWeight = "bold"
      mess.style.position = "relative"
      mess.style.left = "2vw"
    }
    else {
      head.textContent = msg.user
      var randomColor = Math.floor(Math.random() * 16777215).toString(16);
      head.style.color = "blue"
      head.style.fontWeight = "bold"
      mess.style.position = "relative"
      mess.style.left = "2vw"
    }
    // item.textContent = msg.message;
    messages.appendChild(item);
    window.scrollTo(0, document.body.scrollHeight);
  });

  socket.on('delete message', function (msg) {
    messages.innerHTML = ""
  })
  socket.on('disconnect', function () {
    socket.disconnect();
  });

  socket.on('user', function (data) {
    if (data.first) {
      document.getElementById('userName').innerHTML = data.username
      dataUser = data
      dataUser.first = false
    }
    else {
      if (data.id == dataUser.id) {

        document.getElementById('userName').innerHTML = data.username
        dataUser = data
      }
    }

  })

  function changeName() {
    // Get the modal
    let modal = document.getElementById("myModal");
    let span = document.getElementsByClassName("close")[0];
    modal.style.display = "none";
    let input = document.getElementById('name').value
    if (input) {
      dataUser.username = input
      socket.emit('user change', { "idUser": dataUser.id, "username": input, "id": dataUser.id, "first": false, color:dataUser.color })
    }
  }

</script>

</html>